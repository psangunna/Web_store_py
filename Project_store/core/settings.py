"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
 
from pathlib import Path
import os
from django.contrib.messages import constants as messages
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-460fi=w3&j1i4ee5o*(w7ly3@-kzny8x$rf#&%*7f7@$k@el@i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


"""Esta configuración especifica una lista de nombres de host válidos para la aplicación.
Solo las solicitudes con un encabezado Host que coincida con uno de los elementos en esta lista 
serán procesadas.
Esta configuración asegura que las solicitudes de Stripe, al escuchar eventos webhook, 
serán permitidas por Django siempre que contengan el encabezado Host correspondiente a uno de
los nombres de host especificados. 
Esto es necesario para manejar eventos de webhook provenientes de Stripe durante el desarrollo.
-->stripe listen --forward-to localhost:8000/payment/webhook)"""
ALLOWED_HOSTS = ['yourdomain.com', '127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'basket',
    'store',
    'account',
    'payment',
    'orders',
    'options',
    'chatbox',
    'suppliers',
    'inventory',
    'graphs',
    'crispy_forms',
    'crispy_bootstrap4',
    'django_extensions',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'
"""
Context_processors:   'store.context_processors.categories',
                       'basket.context_processors.basket',
los datos que proporcionan estarán disponibles en todas las plantillas que utilicen 
estos context processors. Esto significa que puedes acceder a estos datos 
directamente desde las plantillas de Django sin tener que pasarlos explícitamente en cada vista."""

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.categories',
                'basket.context_processors.basket',
            ],
        },
    },
]
   
WSGI_APPLICATION = 'core.wsgi.application'
 

# Database 
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME':  BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

      
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
    
TIME_ZONE = 'UTC'
   
USE_I18N = True

USE_TZ = True

"""configurando Crispy Forms para utilizar el conjunto de plantillas diseñado para Bootstrap 4. 
Al configurar CRISPY_TEMPLATE_PACK en 'bootstrap4', se aplican
los estilos y clases de Bootstrap 4 al renderizar tus formularios."""
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]  

"""Se ajusta la apariencia visual de los mensajes de error de Django para que se muestren
con el estilo asociado a la clase danger, comúnmente  en rojo para los mensajes de error"""
MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}

""" MEDIA_URL y MEDIA_ROOT relacionadas con la gestión de archivos multimedia, 
como imágenes y archivos subidos por los usuarios. Aquí hay una breve descripción de cada una:

MEDIA_URL define la URL base para los archivos multimedia servidos por la aplicación. 
Es la parte de la URL que se concatena con las rutas de los archivos multimedia almacenados en el sistema de archivos. 
Por ejemplo, si MEDIA_URL es /media/,
entonces un archivo llamado imagen.jpg se accederá a través de la URL /media/imagen.jpg. """

MEDIA_URL = '/media/'

"""MEDIA_ROOT especifica la ubicación en el sistema de archivos donde se almacenarán los archivos multimedia. 
Es la ruta del directorio en el servidor donde se guardan los archivos subidos."""
MEDIA_ROOT =  os.path.join(BASE_DIR,'media/')


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Basket session ID
"""La configuración BASKET_SESSION_ID esta relacionada con la cesta de compras o "basket" en la aplicación
Se usan sesiones para rastrear el contenido del carrito de compras de un usuario mientras navega por un sitio web.
BASKET_SESSION_ID indica el nombre de la clave que se utilizará en la sesión del usuario para almacenar la 
información del carrito de compras. 
En este caso, el nombre de la clave es 'basket'. 
"""
BASKET_SESSION_ID = 'basket'

# Custom user model 
"""Esta configuración se utiliza para especificar el modelo de usuario 
personalizado que se utiliza en la aplicación.
Se ha configurado AUTH_USER_MODEL para que apunte a 'account.Customer'. Modelo de usuario personalizado
llamado Customer en el módulo account.El modelo Customer gestionará la autenticación de usuarios."""
AUTH_USER_MODEL = 'account.Customer'

"""LOGIN_REDIRECT_URL establece la URL a la cual los usuarios serán redirigidos después de iniciar
sesión correctamente. En este caso después de iniciar sesión, 
los usuarios serán redirigidos a /account/dashboard."""
LOGIN_REDIRECT_URL = '/account/dashboard'

"""LOGIN_URL especifica la URL a la cual serán redirigidos los usuarios si intentan acceder a una página
que requiere inicio de sesión pero no han iniciado sesión. En este caso
la URL de inicio de sesión es /account/login/"""
LOGIN_URL = '/account/login/'

# Email setting
"""Esta configuración imprimirá los correos electrónicos generados en la 
consola del servidor de desarrollo en lugar de enviarlos por correo electrónico real."""
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Stripe Payment
"""Clave pública de Stripe (STRIPE_PUBLISHABLE_KEY) en el entorno de la aplicación.
La clave pública se utiliza en el lado del cliente para interactuar con la API de Stripe.
La clave proporcionada en el ejemplo es la clave de prueba y debe reemplazarse con la clave pública de producción cuando la aplicación esté lista para ser desplegada en un entorno de producción."""

os.environ.setdefault('STRIPE_PUBLISHABLE_KEY', "pk_test_51O0gKpE058wa3WOalKf4zkGV4AVpPqAwX6MDlPHvojOyA48IQesV340yeV85JkWP0vXpv6bItFvdcxYloySZapbI005OhetWKd")

"""Esta variable almacena tu clave secreta de Stripe (sk_test_...). 
La clave secreta se utiliza en el lado del servidor para realizar operaciones más seguras, 
como crear pagos y gestionar clientes.
Al igual que con la clave pública, la clave secreta proporcionada en el ejemplo es de prueba. Se Debe reemplazarla con la clave secreta de producción antes de lanzar la aplicación en producción."""

STRIPE_SECRET_KEY = "sk_test_51O0gKpE058wa3WOaKgL4cIx8H7qsquO4LCTxnKNGyYEg7a3jMs05zmqF3VofdWWidq6t9WcTaoOI14Z9IRbam5gy00ITx33OXG"

"""Esta variable almacena la clave secreta del extremo (whsec_...) que se utiliza
para verificar la autenticidad de los eventos de webhook recibidos de Stripe.
Los eventos de webhook son notificaciones de cambios en el estado de los recursos de Stripe,
como pagos y clientes. Clave secreta de tu endpoint de webhook en Stripe."""
STRIPE_ENDPOINT_SECRET = "whsec_d6ee2bed5bc371fca8db51694c51238836517dc8f09fb35c384225c737dadd77"

#
GRAPH_MODELS = {
    'all_applications': True,
    'group_models':True,}
